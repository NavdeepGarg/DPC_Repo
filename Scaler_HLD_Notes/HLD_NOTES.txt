•Database Types and characteristics
  •RDBMS: for consistency
		PROS: ACID prop, consistency, fixed schema, good for vertical scaling and not for horizontal
		CONS: JOINS becomes complex and adding columns become expensive when datasize grows
           
  •Key-Value Stores : For feature flags, some discoutn values to store e.g REDIS, Memchached etc 
		PROS: fast response
		
  •Document Based Schema: When no fixed schema and heavy read and writes required.
		PROS: highly scalable, sharding support, aggregation queries.

  •Column DBs: nto support ACID transaction , for heavy data or strema data like music player, health tracking data, IoT devices data
		PROS: highly writes,support distibuted DBs.
		
	•Search DBs : full text serach queries, searchign of products, searchign of fligths.
		PROS: they are not primary DB but actually work along with RDBMS in real world application.
  


•Case study of delicious.com is discussed which sclaed from one computer to different server
	•ICANN : The Internet Corporation for Assigned Names and Numbers-- Non Profit organization
	• DNS server : 
		for eg: Google DNS server is at 8.8.8.8 , 8.8.4.4
		Open DNS : 208.67.222.222
		CloudFare : 1.1.1.1.

•DNS Resolution:
  Find in Browser Cache -> OS Cache ->Resolved Cache(ISP/LEVEL) ->Root Server ->Top Level Domain Server(.com, .co,.gov etc)
  On resolving and coming backward it will be added in cache.


•Keywords

 •Asynchronous Communication means , response ab kabhi bhi aae doesnt matter to the application. i.e. it is not the clocking request.
 
 •sticky session login for dedicated session in stateful architechture.
 •cloudfare for geolocations.
 •token bucket theorem , sliding window timer theorem, leaky bukcet(with queue and fixed processing rate) in context of RateLimiter.
 •master replica, ticket server,uuid, twitter snowflake -- in contect of unique id genertator in distibuted enivroment
 •Consistency - R+w>N - Read quorum , Write quorum --this is quorum consensus.
 •Consistency models - Strong, Weak, Eventually  
 •Vector clock  to detect conflict in consistency across the nodes in distributed environmnet and reconciliation is done at client side(added overhead)
 •and gossip protocol for failure detecttion.
 •Fanout -Fanout is a messaging design where the published message from a particular publisher is consumed by multiple different subscribers independently and simultaneously
  •A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton Howard Bloom in 1970, that is used to test whether an element is a member of a set.
    BloomFilter doesnot give false negative but can give false positive.
	 (agar Bloomfilter ne mana kar diya toh voh pakka nhi hain- thumb rule)
  
  •Key Value Pair Design
   •Gossip Protocol , Vector clocking for consistency
   •sloppy quoram, merkel tree for temp failure and perm failure respectively.
   •A Merkle tree is used for inconsistency detection and minimizing the amount of data transferred.
   •Write
   •Read -- >cache -- > bloom filter - to search in sorted set table(ss).   
   •When the memory cache is full or reaches a predefined threshold, data is flushed to
   SSTable [9] on disk. Note: A sorted-string table (SSTable) is a sorted list of <key, value>
   pairs
  
  •Notification System- final design at 158 & 163.
	•Third PArty services(APN, Firebase , Mailchimp,Twilik for SMS)
	•User Id and User Devise one to many relationship for tracking the notiifcation receipients .
	
 •News Feed System- final design at 171, 174.
  •Feed Publishing, NewsFeedBuilding
  •FeedPublishing --Fanout on write -- for normal user, Fanout on read- for celebreties.
  •Graph DB for friends retrieval
  •Ratelimiting for limiting the posts per user
  
	
   
  •Chat server 
	•questions: groiup, one to one , media, no of mem. in group, DAU,message length, user status, multiple device support
	•capacity storage--
	•HLD -- client--> LB--> appserver-->services-->third party-->db/cache
	•zookeper- for discovery of nearest chat server
	•Websocket
	•KV storage for messages in NoSQL fashion
	•RDBMS for users details.
	
	
  •Design Google Drive
  
  	•First case of Strong consistency.
	
		   High consistency requirement
		Our system requires strong consistency by default. It is unacceptable for a file to be shown
		differently by different clients at the same time. The system needs to provide strong
		consistency for metadata cache and database layers.
		Memory caches adopt an eventual consistency model by default, which means different
		replicas might have different data. To achieve strong consistency, we must ensure the
		following:
		• Data in cache replicas and the master is consistent.
		• Invalidate caches on database write to ensure cache and database hold the same value.
		Achieving strong consistency in a relational database is easy because it maintains the ACID
		(Atomicity, Consistency, Isolation, Durability) properties [9]. However, NoSQL databases do
		not support ACID properties by default. ACID properties must be programmatically
		incorporated in synchronization logic. In our design, we choose relational databases because
		the ACID is natively supported.
   
   •Metadata is anything excpet main content
   
  
  FROM DDIA BOOK :

•Database Category
 •Relational DB: Optimized for transaction and batch processing
 •Document DB:NoSQL, better performance due to locality/Hig write throughput
 •Graph DB: For higlhy interconnectd system. DB ex : Social Graph, WebGraph, Neo4j AnzoGraph.

•chapter 4 Agile
  Endcoding and Decoding is discussed based on respective encoded format.
  either it is TextJSON, Binary etc.

•Replication
 DB-Replication Algos: 1) By wirting sQL statements 2) by wirting Logics 3) Trigger based replcation
 
•Conflict Reoslution
 Quorum
 
•LEADERLess Replication
  R+W>N , Amazon Cassadra etc .

 
 
 
 •Reference materials
  
  
  
  
  
 •REFEERENCES
  •https://blog.teamtreehouse.com/should-you-go-beyond-relational-databases
  •https://medium.com/design-microservices-architecture-with-patterns/microservices-communications-f319f8d76b71
  •https://www.metabrew.com/article/anti-rdbms-a-list-of-distributed-key-value-stores
  •https://en.wikipedia.org/wiki/Multi-master_replication	
  •https://efficientcodeblog.wordpress.com/2017/12/25/leaderless-replication-dynamo-style-quorum-consensus-eventual-consistency-high-availability-and-low-latency/
 •https://medium.com/double-pointer/system-design-interview-uber-or-a-similar-app-grab-lyft-or-ola-design-76807fac24c3 
