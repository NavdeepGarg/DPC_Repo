#####################Design Patter Notes#####################

•It is a reusable solution to commonly occuring problem within in a givn context of software design.

•Patterns are required bcoz we don't want to reinvent the wheel.
	 
•Make sure your design is in such a way that it is adaptable to change

Smells are the indication that you are doing something wrong.
	•like rigidity,fragility,tight coupling ,needless repetition,too many public members(it violates encapsulation)

Program to an interface and do for implementation.It is a common theme of design pattern.

•SOLID is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin 
•These principles establish practices that lend to developing software with considerations for maintaining and extending as the project grows.
	Adopting these practices can also contribute to avoiding code smells, refactoring code, and Agile or Adaptive software development.
	SOLID stands for:

    S - Single-responsibility Principle
    O - Open-closed Principle
    L - Liskov Substitution Principle
    I - Interface Segregation Principle
    D - Dependency Inversion Principle
	
SOLID
O:  open for extension closed for modification.
	Example : 
	Calculator , better to make it a interface so that in future new operation can be added without modifying the current class.	
l : lISKOV Substitution 
		•Object of a parent class should be completely replacable by object of child class.
		
		•Child class substitute to parent class must be done, Vehicle with and without engine example
		•LSP is normally voilated at two places:
			•When we throw exception from child-classes
			•When we give a different meaning to the method of a parent class/ interface
		
Interface segregation
		•Make interface as light as possible(add only very relevant methods)
			Cuboid and Shape
Dependency Inversion Principle 

	•High-level modules(Jo depend kar rhe hai doosri class par) should not depend on low-level modules(Jis class par depend kar rhe hai). Both should depend on the abstraction.
	•Abstractions should not depend on details. Details should depend on abstractions.
	•encourage the thinking in making of abstraction/interfaces.
	•think first of abstraction than concrete class.
	•if you are overriding the implemented method in superclass, it means you have not done the abstraction properly, rethink and change the design
	coz it will end up in high coupling.
	
	•No 2 concrete class shall be directly dependant on each other.
	•Any 2 concrete class should depend on each other via an interface
	•what inversion is happening is the , not getting implementation directly from the class but via interfcae implementation.
	
	e.g.
	class Paytm{
	 PaytmPaymentProcessor paymentProcessor;
	}
	
	interface PaytmPaymentProcessor{
	//relvant methods.
	}
	// following are the 2 currentl available implementtion of PaytmPaymentProcessor
	RazorPay implements PaytmPaymentProcessor{
	}
	JustPay implements PaytmPaymentProcessor{
	}

Composition has many benefits than inheritance.
	•It offer loose coupling.
	•It provide more extensibility bcoz there is least to bother about the inheritance linkage
	•There is always most time spent on code after its development, so better to think for extensibility wherever it can be  applicable.
	 This argument favors Composition over Inheritance.
	•Composition enhance polymorphism

Delegation
	•when a class delegate some task to other class to accomplish
	•It also uses the cOmposition principle.
	•equals() and hashCode() is the classic example.
	 In order to compare two objects for equality we ask the class itself to do the comparison instead of client class doing that check.
	It requires the current class to override the Object class equals and hashCode functions and delegating its work on them.
	
Dependency Inversion Principle(DIP)
	•encourage the thinking in making of abstraction/interfaces.
	•think first of abstraction than concrete class.
	•if you are overriding the implemented method in superclass, it means you have not done the abstraction properly, rethink and change the design
	coz it will end up in high coupling.
	
Dependency Injection:
	•It goes hand in hand with DIP
	•if you want to use DI, following 4 roles will be required
		•the service you want to use
		•the client uses the service
		•an interface that is used by the client(composition rule) and implemented by a service
		•injector which creates a service instance and inject it to the client.
	

Dependency Injection
	•When a class A is dependent on Class B to use its method, and to do so Class A has to create an instance of Class B
	•Dependency Injection depends on Inversion of Control Principle
	•Inversion of Control : A class should not configure its dependencies statically but should be configured by some other class fromm outside.
	    Components are not responsible for handling the creation of the dependencies they need
		Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). As the name suggests, it is used to invert different kinds of controls in object-oriented design to achieve loose coupling. Here, controls refer to any additional responsibilities a class has, other than its main responsibility. This include control over the flow of an application, and control over the flow of an object creation or dependent object creation and binding.
		IoC is all about inverting the control. To explain this in layman's terms, suppose you drive a car to your work place. This means you control the car. The IoC principle suggests to invert the control, meaning that instead of driving the car yourself, you hire a cab, where another person will drive the car. Thus, this is called inversion of the control - from you to the cab driver. You don't have to drive a car yourself and you can let the driver do the driving so that you can focus on your main work.

•DIP stands for  : Dependency Inversion Principle
	"High-level modules should not depend on low-level modules. Both should depend on abstraction. Abstractions should not depend on details. Details should depend on abstractions."
•DIP &IoC are Design principle
•Dependency Injection is a Design Pattern
•IoC Container is the FRAMEWORK

IOC
	•invert different kinds of controls in object-oriented design to achieve loose coupling.
	•Framework will provide the dependencies magically on its own.
	•analogy : The IoC principle suggests to invert the control, meaning that instead of driving the car yourself, you hire a cab, where another person will drive the car. Thus, this is called inversion of the control - from you to the cab driver.
	•To achieve it use Factory class to provide you the object on which you are dependent on.
	
DIP: Dependency Inversion Principle
	•2 principles
	•High-level modules(Jo depend kar rhe hai doosri class par) should not depend on low-level modules(Jis class par depend kar rhe hai). Both should depend on the abstraction.
	•Abstractions should not depend on details. Details should depend on abstractions.
	
	
UML is the documentation technique in a visual way that describe design.

For folks, who are rushing through the course for an upcoming interview,I would suggest going through all the creational design patterns,
decorator, proxy, iterator, observer and visitor patterns. As you read
through them, be sure to look at the Java framework's api examples
pointed out in each lesson.
	




•Suggestions for Object Orientated Design
	Whenever writing code in an object orientated language, sticking to the following list of suggestions will make your code amenable to changes with the least effort.
	1)Separate out parts of code that vary or change from those that remain the same.
	2)Always code to an interface and not against a concrete implementation.<<STAR>>
	3)Encapsulate behaviors as much as possible. <<STAR>>
	4)Favor composition over inheritance. Inheritance can result in explosion of classes and also sometimes the base class is fitted with new functionality that isn't applicable to some of its derived classes.
	5)Interacting components within a system should be as loosely coupled as possible.
	6)Ideally, class design should inhibit modification and encourage extension.
	7)Using patterns in your day to day work, allows exchanging entire implementation concepts with other developers via shared pattern vocabulary.


•Design patterns for object orientated programs are divided into three broad categories listed below. These are the same categories used by GoF in their seminal work on design patterns.
	Creational
	Structural
	Behavioral

•Creational
	Creational design patterns relate to "how objects are constructed from classes". The creational design pattern come with powerful suggestions on how
	best to encapsulate the object creation process in a program.
		•Builder Pattern
		•Prototype Pattern
		•Singleton Pattern
		•Abstract Factory Pattern

•Structural
	Structural patterns are concerned with the composition of classes i.e. how the classes are made up or constructed
		•Adapter Pattern
		•Bridge Pattern
		•Composite Pattern
		•Decorator Pattern
		•Facade Pattern
		•Flyweight Pattern
		•Proxy Pattern

	
•Behavioral
	Behavioral design patterns dictate the interaction of classes and objects amongst each other and the delegation of responsibility.
		•Interpreter Pattern
		•Template Pattern
		•Chain of Responsibility Pattern
		•Command Pattern
		•Iterator Pattern
		•Mediator Pattern
		•Memento Pattern
		•Observer Pattern
		•State Pattern
		•Strategy Pattern
		•Visitor Pattern


•Abstract Factory Pattern(Creational)
	
	1)The abstract factory pattern solves the problem of creating families of related products. For instance, F-16 needs an engine, a cockpit, and wings. 
	  The Boeing-747 would require the same set of parts but they would be specific to Boeing.
	  
	2)One of the fundamental principles of good object orientated design is to hide the concrete classes and expose interfaces to clients.
	
	3)It might appear to the naive reader that the factory method pattern and the abstract factory pattern are similar. The difference between the two lies in their motivations. 
		The factory   method pattern is usually responsible for creating a single product whereas an abstract factory pattern creates entire families of related products.
		Furthermore, in the factory method pattern, we use inheritance to
		create more specialized products whereas, in an abstract factory
		pattern, we practice object composition by passing in factories that
		are consumed to create the desired products.
	4)Related to current domain at ISRO , it can be PaymentMadesource either it can be Purchase, Payroll, Account, store
	 	
	5) Next example could be creating a room , comprises window bed and cupboard
	
	


•Singleton(Creational)
	•Most simplest • ensure class has only one instance and provide global point of access to it
	•example printer,file system etc.
	•In its implementation , using 'synchronized' keyword in the getinstance() method will create lot of overhead and also synchronization is required only for 
	the time when the object is going to be created for the very first time.Thus it creates performance issue.
	•To tackle the performance issue double check locking is applied, where synchronized block is used.
		Just for ref. (placeholder)
				enum Singleton
				{
					INSTANCE;
					// instance vars, constructor
				 
					private final Connection connection;
					 
					Singleton()
					{
						// Initialize the connection
						connection = DB.getConnection();
					}
				 
					// Static getter
					public static Singleton getInstance()
					{
						return INSTANCE;
					}
				 
					public Connection getConnection()
					{
						return connection;
					}
				}


•BUILDER PATTERN(Creational)
	•It is useful when Step by Step Object creations or Sequence in operation is required
	•builder pattern encapsulates or hides the process of building a complex object and separates the representation of the object and its construction
	•StringBuilder is using this approach and so it is in its name.
	•Used for creating Complex Objects and Composite Objects.
	•
	
•Prototype Pattern(Creational)
	•Prototype is blueprint
	•In this pattern we clone a object already present and do other things on this clone.
	•Used when creatign a obect is complex and multiple object of same type

•Decorator Pattern(Structural)
	•A decoration is added to something to make it more attractive, in the
	same spirit, the decorator pattern adds new functionality to objects without modifying their defining classes.
	•A prominent example of this pattern is the java.io package, which includes several decorators. Look at the snippet below:
						public void main() {
				// FileInputStream is responsible for reading the file
				FileInputStream fileInputStream = new FileInputStream("my
				File.txt");
				// BufferedInputStream extends FilterInputStream and not
				 FileInputStream, it is
				// a decorator which enhances the functionality of the or
				iginal object by wrapping over it.
				BufferedInputStream bufferedInputStream = new BufferedInp
				utStream(fileInputStream);
				// The read operation becomes buffered now
				bufferedInputStream.read();
				}
		The FileInputStream is the object actually responsible for reading the text file. If we wanted to introduce buffered read functionality, one
		way of doing it would be to subclass FileInputStream and add the new functionality. The other is to use the decorator pattern which is
		how it is implemented in the Java framework. The BufferedInputStream wraps the FileInputStream to provide buffering capabilities.
	

•Proxy Pattern
	

	
•Iterator Pattern(Behavioral)


•Observer Pattern(Behavioral)
	•Social media helps us immensely in understanding the observer pattern. If you are registered on Twitter then whenever you follow someone, you
	are essentially asking Twitter to send you (the observer) tweet updates of the person (the subject) you followed. The pattern consists of two actors,
	the observer who is interested in the updates and the subject who generates the updates.
	•In Java, implementations of java.util.EventListener are examples of the observer pattern.
	•Related to current domain at ISRO , it can be TDP Approval Notifications to all team members

•Visitor Pattern(Behavioral)
