import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;

/*
Given Array of Intergers:

1. Given number n, return all unique pairs whose sum equals the given n. 
   Example: [2,2,1,3,5,4] n=7 --> {2,5},{3,4}
   
2. return the last repeated item
   Example: [2,2,1,3,5,4,1] --> last repeated: 1
   Example: [2,2,1,3,5,4] --> last repeated: 2
   Example: [2,1,3,5,4] --> last repeated: NULL or -9999
*/

//2 , 7-2 =5 , 5 (2,5) --  (5,2)
//

//List<List<Integer>> 

//HashMap<integer,integer> =
//   5,2     6,1 4,3 5
import java.util.*;
class Solution {
    /*
     Example: [2,2,1,3,5,4,1] --> last repeated: 1
   Example: [2,2,1,3,5,4] --> last repeated: 2
   Example: [2,1,3,5,4] --> last repeated: NULL or -9999 */
    
    public List<List<Integer>> findUniquePairs(int[] arr,int sum){
        
        List<List<Integer>> output = new ArrayList<>();
        if(arr.length==0){
            return output;
        }
        if(sum==Integer.MAX_VALUE || sum==Integer.MIN_VALUE){
         return output;   
        }
        
         HashMap<Integer,Integer> elementMap= new HashMap<>();
         
          //[2,2,1,3,5,4] n=7 --> {2,5},{3,4}
          // 5,2    6,1 4,3 
         for(int i : arr){
             
             if(elementMap.containsKey(i)){
                 
                 if(elementMap.get(i)!=null){
                     ArrayList<Integer> temp = new ArrayList<>();
                     temp.add(i);temp.add(elementMap.get(i));
                     output.add(temp);
                 }
                 
               elementMap.put(sum-i,null) ;
             }else{
                 
                  elementMap.put(sum-i,i) ;
             }
             
             
             
         }
        return output;
    }
    
    
    public int lastRepeated(int[] arr){
        
        HashSet<Integer> set = new HashSet<>();
        int len=arr.length;
        int ans=-9999;
        for(int i =len-1; i >=0; i--){
            
            if(set.contains(arr[i])){
                ans=arr[i];
                break;
            }
            set.add(arr[i]);
        }
        
        return ans;
        
    }
    //IPWS   PFMS
    
    
    
    public static void main(String[] args) {
        Solution obj = new Solution();
        int[] arr={}       ;
        //int sum =99;
        
    //    System.out.println(obj.findUniquePairs(arr, sum));
        System.out.println(obj.lastRepeated(arr));
        
    }
    
    // test scenario
    //edge case handling - 1) arr = empty 2) sum = Integer.MAX , MIN 3)
}
