

Software is: (1) instructions (computer programs) that when executed provide desired
features, function, and performance; (2) data structures that enable the programs to adequately
manipulate information, and (3) descriptive information in both hard copy and
virtual forms that describes the operation and use of the programs

Technical competence, communication skills, inter personnel skills, maintain competence makes a good s/w engineer.

Process
	•Set of activities

Metric:
	•IEEE93 defines it as a quantitative measure of the degree to which system , component, process, possess on attribute.

Engineering
	•Engineering is a scientific field and job that involves taking our scientific understanding of the natural world and using it to invent, design, and build things to solve problems and achieve practical goals in cost effective manner

Software_Engineering
	•It is systematic, disciplined, quantifiable approach in development ,maintenance and operationalization of software.
	•Software crisis: is the difficulty of writing a software in required time.
	 Causes are : lack o budget management, skillful  human resources
	 Solution is Software Engineering
	 
Types of Software:
	•System Software : collection of program that serves other s/w e.g. : Operating systematic
	•Application Software : developed for end users .. e.g. : Excel and MS word
	•Embedded Software: It resides in ROM. it is used to control products and sys for consumer and industrial works. E.g.: GPS devices, factory robot
	•Web Application : client server model
	•Artificial intelligence : 
	

Software Life Cycle Model
	•DEfines Entry and Exit criteria for every phase , which help project manager to monitor the progress of project 

Waterfall Model
	•First introduced by Dr. Winston W. Royce in a paper published in 1970,
	•In phase manner, once one phase over then only next phase start(top to down)
	•Requirement Analysis : SRS , sharing the contract document with customer and producer.
	•System Design : System Architecture, Hardware in use, SDD
	•Implementation : covering each unit and development of small prog called units
	•Integration and Testing : Int of all unit and testing
	•Deployment : releasing in the market
	•Maintenance: After release
	Advantages: 
		•Phase wise manner, clear definition and role specifications, easy to use
	Disadvantage:
		•No working prototype will be produced until late during life-cycle
		•high risk and not usable for complex projects

Prototyping Model

	•The prototyping paradigm begins with communication.Meet with stakeholders to define the overall objectives for the software.
	•Then quick design/model -> construction of a prototype->stakeholders feedback->further refinements 	
	Advantages: 
		•Customer can see steady progress.
		•Useful when requirement are changing rapidly
	Disadvantage:
		•Dont know when customer will satisfy 
		•No fixed count of iterations

Spiral Model
	•Is a evolutionary model that couples with iterative and waterfall model with 'risk analysis'.
	•If your management demands fixed-budget development (generally a bad idea), the spiral can be a problem. As each circuit is completed, project cost is revisited and revised
	•The first circuit around the spiral might result in the development of a product
		specification; subsequent passes around the spiral might be used to develop a prototype
		and then progressively more sophisticated versions of the software. Each pass
		through the planning region results in adjustments to the project plan. Cost and
		schedule are adjusted based on feedback derived from the customer after delivery.
		In addition, the project manager adjusts the planned number of iterations required
		to complete the software.
	•Unlike other process models that end when software is delivered, the spiral model
can be adapted to apply throughout the life of the computer software.

	
Incremental Development
	•Incremental Development is a practice where the system functionalities are sliced into increments (small portions). In each increment, a vertical slice of functionality is delivered by going through all the activities of the software development process, from the requirements to the deployment.

	•Incremental Development (adding) is often used together with Iterative Development (redo) in software development. This is referred to as Iterative and Incremental Development (IID).

Evolutionary method

	•Evolutionary model is a combination of Iterative and Incremental model.

	•The terms evolution and evolutionary have been introduced by Tom Gilb in his book Software Metrics published in 1976 where he wrote about EVO, his practice of IID (perhaps the oldest). Evolutionary development focuses on early delivery of high value to stakeholders and on obtaining and utilizing feedback from stakeholders.
	 
	•Evolutionary iterative development implies that the requirements, plan, estimates, and solution evolve or are refined over the course of the iterations, rather than fully defined and “frozen” in a major up-front specification effort before the development iterations begin. Evolutionary methods are consistent with the pattern of unpredictable discovery and change in new product development.
	
	
Rapid application development
	•agile software development methodology
	•prioritizes rapid prototype releases and iterations
	•emphasizes the use of software and user feedback over strict planning and requirements recording
	
	Benefits
	•Enhanced flexibility and adaptability as developers can make adjustments quickly during the development process.
	•Encouragement of code reuse, which means less manual coding, less room for errors, and shorter testing times.
	•Increased customer satisfaction due to high-level collaboration and coordination between stakeholders 
	
Agile Development
	•Agile software engineering combines a philosophy and a set of development guidelines.
	•The philosophy encourages customer satisfaction and early incremental delivery of software; small, highly motivated project teams;a nimble team is required
	informal methods; minimal software engineering work products; and overall development simplicity. 
	•The development guidelines stress delivery over analysis and design and active and continuous communication between developers and customers.
	•It has 12 principles
	•Human factor is most important ,a nimble team is required
	
	
Scrum (the name is derived from an activity that occurs during a rugby match13) is an agile software development method
	terms under it:
	•Backlog—a prioritized list of project requirements
	•Sprints—consist of work units that are required to achieve a requirement.
	•Scrum meetings—are short (typically 15 minutes) meetings held daily by the Scrum team
		 •What did you do since the last team meeting?
		 •What obstacles are you encountering?
		 •What do you plan to accomplish by the next team meeting?
	
•It all depends how you are comfortable in developing your software.Based on the environment and skill set modern approach of software model is picked and continue with development.
 Concurrent Models, Component based model, Aspect Oriented model are new approaches fro software life cycle that more or less involves evolutionary model strategies.

 
 
Big Bang Model
	•Everything about the project is completed with a laissez-faire(the policy of leaving things to take their own course) attitude, with little regard or care for what may come next, and instead simply enjoying the work that is being performed at that very moment
	•No Planning Requirements•No Management Requirements•Ideal of Multi-Disciplined Developers: Who are full stack developers
	
	
#############

Software Quality:
	A quality software does exactly what we want it to do,
	Factors:
	•Portability, Usability, Reusability, correctness.

SEI-CMM
	•Software Engineering Institution who developed a model CMM to label the organization for their product quality and help them to improve the quality pf their product.
	•Its implementation has significant business benefits and it can be enforced in two ways:
		Capability evaluation , s/W process assessment.
	
	CMM-1:
	•Initial
	•A s/w development organization at this level is involved/characterized by ad-hoc activities.
	CMM-2:
	•Repeatable
	•A s/w development organization at this level the basic project management practice such as tracking of cost and scheduled are established.
	CMM-3
	•Defined
	•---at this level both management and development are well defined and documented
	CMM-4:
	•Managed
	•Focus is on software metrics
	•Such companies have proper mechanism to collect the Metrics to measure each and every work in the organization, hence future performance can predicted.
	CMM-5:
	•Optimized
	•Process and Product metrics are collected
	•well defined processes, which are properly measured.
	
Software Metric 
https://www.youtube.com/watch?v=bnydxXPN_rI
	•Metric provides the measures fr various aspect of software process and products.
	•It aid in maintain the software quality
	•Acc to Tom Demacro :"you cannot control what you cannot measure"
	•Size Metric: LOC , Function Point COunt , Cyclomatic Coplexity
	•Quality Metric: Defect and their type and causes, severity,and effect on s/w quality
	•Process Metric: The method and tools used , the company standards and performance of dev. are the part of process metrics
	•Resource metric : Effort , Time,Other h/w and human resources.
	•

ISO 9001:
	standard that deals with orgs. dealing with design , dev, prod, serv of goods.Software Industries come under this standard only.
	
#############

Verification and Validations
Verification:
	•Set of activities that ensure that software correctly implements a specific functionalities
	•SRS is the base for this
	•Code inspection , review are the part of this activity.
Validations:
	•Set of activities that ensure that the software is traceable to customer requirement
	•In other words, it validate whether we have built a right product.
	•	

https://www.youtube.com/watch?v=YI0X5z15n-g


Types of Coupling:(DSCECC)

    •Data Coupling:If the dependency between the modules is based on the fact that they communicate by passing only data, then the modules are said to be data coupled. In data coupling, the components are independent to each other and communicating through data. Module communications don’t contain tramp data. Example-customer billing system.
    •Stamp Coupling:In stamp coupling, the complete data structure is passed from one module to another module. Therefore, it involves tramp data. It may be necessary due to efficiency factors- this choice made by the insightful designer, not a lazy programmer.
    •Control Coupling: If the modules communicate by passing control information, then they are said to be control coupled. It can be bad if parameters indicate completely different behavior and good if parameters allow factoring and reuse of functionality. Example- sort function that takes comparison function as an argument.
    •External Coupling: In external coupling, the modules depend on other modules, external to the software being developed or to a particular type of hardware. Ex- protocol, external file, device format, etc.
    •Common Coupling: The modules have shared data such as global data structures.The changes in global data mean tracing back to all modules which access that data to evaluate the effect of the change. So it has got disadvantages like difficulty in reusing modules, reduced ability to control data accesses and reduced maintainability.
    •Content Coupling: In a content coupling, one module can modify the data of another module or control flow is passed from one module to the other module. 
	This is the worst form of coupling and should be avoided.
	
Types of Cohesion:(TCS-PCF)

    •Functional Cohesion: Every essential element for a single computation is contained in the component. A functional cohesion performs the task and functions. 
	It is an ideal situation.
    •Sequential Cohesion: An element outputs some data that becomes the input for other element, i.e., data flow between the parts. It occurs naturally in functional programming languages.
    •Communicational Cohesion: Two elements operate on the same input data or contribute towards the same output data. Example- update record int the database and send it to the printer.
    •Procedural Cohesion: Elements of procedural cohesion ensure the order of execution. Actions are still weakly connected and unlikely to be reusable. Ex- calculate student GPA, print student record, calculate cumulative GPA, print cumulative GPA.
    •Temporal Cohesion: The elements are related by their timing involved. A module connected with temporal cohesion all the tasks must be executed in the same time-span. This cohesion contains the code for initializing all the parts of the system. Lots of different activities occur, all at init time.
    •Logical Cohesion: The elements are logically related and not functionally. Ex- A component reads inputs from tape, disk, and network. All the code for these functions is in the same component. Operations are related, but the functions are significantly different.
    •Coincidental Cohesion: The elements are not related(unrelated). The elements have no conceptual relationship other than location in source code. 
	It is accidental and the worst form of cohesion. Ex- print next line and reverse the characters of a string in a single component.

DFD
	•Data Flow Diagram 
	•It shows how information enters and leaves the system, what changes the information and where information is stored. The purpose of a DFD is to show the scope and boundaries of a system as a whole. It may be used as a communications tool between a systems analyst and any person who plays a part in the system that acts as the starting point for redesigning a system.
	•Begins with a context diagram as level 0 of the DFD diagram and then further drill down to a level 1 diagram with lower-level functions decomposed.
	
	