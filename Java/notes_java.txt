•Find out the different version differences in java 
from java 8 to 11

strictness order of modifiers:
	private>default>protected>public

•default is package private identifier, i.e. it scope will not be visible outside package , chahe voh subclass hi kyu na ho.

•volatile keyword solve the visibilty prob not synchrnization prob.
	•volatile modifiers variable pass on their values from their local cache to shared cache immediately.
	
•atomic variable are basically used in case of compund operations like increment / decrement.
	•These operations are actually two step processes fetch then add . sometimes in synchrnization it is possible that the incremented value is not read by other thread.
	to solve such cases atomicvariables are introduced.
	•Second approach for the above said problem isusing volatile and synchronized block together.

•Double checking is the concept in multithrading environment which mostly used in singleton application.
	Example:
	public class DclSingleton {
    private static volatile DclSingleton instance;
    public static DclSingleton getInstance() {
        if (instance == null) {
            synchronized (DclSingleton .class) {
                if (instance == null) { // double checking happening here.
                    instance = new DclSingleton();
                }
            }
        }
        return instance;
    }

    // private constructor and other methods...
}

#####################Design Patter Notes#####################

•It is a reusable solution to commonly occuring problem within in a givn context of software design.

•Make sure your design is in such a way that it is adaptable to change

Smells are the indication that you are doing something wrong.
	•like rigidity,fragility,tight coupling ,needless repetition,too many public members(it violates encapsulation)

Program to an interface and do for implementation.It is a common theme of design pattern.

Composition has many benefits than inheritance.
	•It offer loose coupling.
	•It provide more extensibility bcoz there is least to bother about the inheritance linkage
	•There is always most time spent on code after its development, so better to think for extensibility wherever it can be  applicable.
	 This argument favors Composition over Inheritance.
	•Composition enhance polymorphism

Delegation
	•when a class delegate some task to other class to accomplish
	•It also uses the cOmposition principle.
	•equals() and hashCode() is the classic example.
	 In order to compare two objects for equality we ask the class itself to do the comparison instead of client class doing that check.
	
Dependency Inversion Principle(DIP)
	•encourage the thinking in making of abstraction/interfaces.
	•think first of abstraction than concrete class.
	•if you are overriding the implemented method in superclass, it means you have not done the abstraction properly, rethink and change the design
	coz it will end up in high coupling.
	
Dependency Injection:
	•It goes hand in hand with DIP
	•if you want to use DI, following 4 roles will be required
		•the service you want to use
		•the client uses the service
		•an interface that is used by the client(composition rule) and implemented by a service
		•injector which creates a service instance and inject it to the client.
		
UML is the documentation technique in a visual way that describe design.

Creational Pattern
 •Abstract Factory Pattern(with static creator)
	
	
 •Singleton
	•Most simplest • ensure class has only one instance and provide global point of access to it
	•example printer,file system etc.
	•In its implementation , using 'synchronized' keyword inthe getinstance() method will create lot of overhead and also synchronization is required only for 
	the time when the object is going to be created for the very first time.Thus it creates performance issue.
	•To tackle the performance issue double check locking is applied, where synchronized block is used.
	
	
ISOLATION LEVELS:
TRANSACTION_READ_UNCOMMITTED- 1
TRANSACTION_READ_COMMITTED- 2 (Dirty read solved)
TRANSACTION_REPEATBLAE_READ- 4 (Dirty read, non-repeatable are solved , Phantom not possible ) --DEFAULT IMPLEMENTATION
TRANSACTION_SERIALIZABLE- 8 (Not recommended) -Whole Table Locked--Dirty read, non-repeatable,uncommitted read all problem solved.

getTransactionIsolation()
setTransactionIsolation(int level)


DriverManager :> con = DM.getConnection(jdbc url, user,pwd) : always a new connection is created.
DataSource:> con=ds.getConnection() : from connection pool.

•Jasypt 1.9.3 is a java library which allows the developer to add basic encryption capabilities to his/her projects with minimum effort, and without the need of having deep knowledge on how cryptography works.
•Quartz 2.2 is an open source job scheduling library that can be integrated within virtually any Java application
•log4J a logging library for Java
